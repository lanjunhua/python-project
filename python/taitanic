# -*- coding: utf-8 -*-
"""
Created on Sun Nov 19 21:10:34 2017

@author: junhua.lan
"""

# Titanic
import pandas as pd
import numpy as np
from pandas import Series,DataFrame
import xgboost as xgb

data_train = pd.read_csv('C:\\Users\\junhua.lan\\Desktop\\Kaggle_Titanic\\train.csv')
data_train.columns

data_train.info()
data_train.describe()


import matplotlib.pyplot as plt
fig = plt.figure()
fig.set(alpha = 0.2)
plt.subplot2grid((2,3),(0,0))
data_train.Survived.value_counts().plot(kind = 'bar')
plt.ylabel('num of presons')
plt.title('ssurvived condition')

plt.subplot2grid((2,3), (0,1))
data_train.Pclass.value_counts().plot(kind = 'bar')
plt.ylabel('num of preson')
plt.title('Pclass')

plt.subplot2grid((2,3), (0,2))
plt.scatter(data_train.Survived, data_train.Age)
plt.ylabel('Age')
plt.grid(b = True, which = 'major', axis = 'y')
plt.title('Survived arranged by Age')


plt.subplot2grid((2,3),(1,0), colspan = 2)
data_train.Age[data_train.Pclass == 1].plot(kind = 'kde')
data_train.Age[data_train.Pclass == 2].plot(kind = 'kde')
data_train.Age[data_train.Pclass == 3].plot(kind = 'kde')

plt.xlabel('Age')
plt.ylabel('Density')
plt.title('density of the Pclass')
#plt.legend([line_up, line_down], ['Line Up', 'Line Down'])
#line_up, = plt.plot([1,2,3], label='Line 2')
#line_down, = plt.plot([3,2,1], label='Line 1')
#plt.legend([line_up, line_down], ['Line Up', 'Line Down'])
#plt.legend([line_up, line_down], ['Line Up', 'Line Down'])
plt.legend(('first', 'second', 'thrid'), loc = 'best')


plt.subplot2grid((2,3), (1,2))
data_train.Embarked.value_counts().plot(kind = 'bar')
plt.title('the number of the boat')
plt.ylabel('num of preson')
plt.show()




fig = plt.figure()
fig.set(alpha = 0.2)

Survived_0 = data_train.Pclass[data_train.Survived == 0].value_counts()
Survived_1 = data_train.Pclass[data_train.Survived == 1].value_counts()
df = pd.DataFrame({u'Survived':Survived_1, u'unSurvived':Survived_0})
df.plot(kind = 'bar', stacked = True)
plt.title(u'class of passages')
plt.xlabel(u'class')
plt.ylabel(u'number of person')
plt.show()



#看看各登录港口的获救情况
fig = plt.figure()
fig.set(alpha=0.2)  # 设定图表颜色alpha参数

Survived_0 = data_train.Embarked[data_train.Survived == 0].value_counts()
Survived_1 = data_train.Embarked[data_train.Survived == 1].value_counts()
df=pd.DataFrame({u'获救':Survived_1, u'未获救':Survived_0})
df.plot(kind='bar', stacked=True)
plt.title(u"各登录港口乘客的获救情况")
plt.xlabel(u"登录港口") 
plt.ylabel(u"人数") 

plt.show()




g = data_train.groupby(['SibSp', 'Survived'])
df1 = pd.DataFrame(g.count()['PassengerId'])


data_train.Cabin.value_counts()

fig = plt.figure()
fig.set(alpha = 0.2)

Survived_cabin = data_train.Survived[pd.notnull(data_train.Cabin)].value_counts()
Survived_nocabin = data_train.Survived[pd.isnull(data_train.Cabin)].value_counts()
df = pd.DataFrame({u'have':Survived_cabin, u'not have':Survived_nocabin}).transpose()
df.plot(kind = 'bar', stacked = True)
plt.title(u'cabin VS survived')
plt.xlabel(u'have carbin')
plt.ylabel(u'person')
plt.show()




from sklearn.ensemble import RandomForestRegressor
 
### 使用 RandomForestClassifier 填补缺失的年龄属性
def set_missing_ages(df):
    
    # 把已有的数值型特征取出来丢进Random Forest Regressor中
    age_df = df[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]

    # 乘客分成已知年龄和未知年龄两部分
    known_age = age_df[age_df.Age.notnull()].as_matrix()
    unknown_age = age_df[age_df.Age.isnull()].as_matrix()

    # y即目标年龄
    y = known_age[:, 0]

    # X即特征属性值
    X = known_age[:, 1:]

    # fit到RandomForestRegressor之中
    rfr = RandomForestRegressor(random_state=0, n_estimators=2000, n_jobs=-1)
    rfr.fit(X, y)
    
    # 用得到的模型进行未知年龄结果预测
    predictedAges = rfr.predict(unknown_age[:, 1::])
    
    # 用得到的预测结果填补原缺失数据
    df.loc[ (df.Age.isnull()), 'Age' ] = predictedAges
    
    return df, rfr

def set_Cabin_type(df):
    df.loc[ (df.Cabin.notnull()), 'Cabin' ] = "Yes"
    df.loc[ (df.Cabin.isnull()), 'Cabin' ] = "No"
    return df

data_train, rfr = set_missing_ages(data_train)
data_train = set_Cabin_type(data_train)
data_train


# 因为逻辑回归建模时，需要输入的特征都是数值型特征
# 我们先对类目型的特征离散/因子化
# 以Cabin为例，原本一个属性维度，因为其取值可以是['yes','no']，而将其平展开为'Cabin_yes','Cabin_no'两个属性
# 原本Cabin取值为yes的，在此处的'Cabin_yes'下取值为1，在'Cabin_no'下取值为0
# 原本Cabin取值为no的，在此处的'Cabin_yes'下取值为0，在'Cabin_no'下取值为1
# 我们使用pandas的get_dummies来完成这个工作，并拼接在原来的data_train之上，如下所示
dummies_Cabin = pd.get_dummies(data_train['Cabin'], prefix= 'Cabin')
dummies_Embarked = pd.get_dummies(data_train['Embarked'], prefix= 'Embarked')
dummies_Sex = pd.get_dummies(data_train['Sex'], prefix= 'Sex')
dummies_Pclass = pd.get_dummies(data_train['Pclass'], prefix= 'Pclass')
df = pd.concat([data_train, dummies_Cabin, dummies_Embarked, dummies_Sex, dummies_Pclass], axis=1)

df.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)





# 接下来我们要接着做一些数据预处理的工作，比如scaling，将一些变化幅度较大的特征化到[-1,1]之内
# 这样可以加速logistic regression的收敛
import sklearn.preprocessing as preprocessing
scaler = preprocessing.StandardScaler()
age_scale_param = scaler.fit(df['Age'])
df['Age_scaled'] = scaler.fit_transform(df['Age'], age_scale_param)
fare_scale_param = scaler.fit(df['Fare'])
df['Fare_scaled'] = scaler.fit_transform(df['Fare'], fare_scale_param)
df

sum(df['Age'].isnull())
df['Age'].isnull()[1:10]
df['Age'].describe()





# 我们把需要的feature字段取出来，转成numpy格式，使用scikit-learn中的LogisticRegression建模
from sklearn import linear_model

train_df = df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')
train_np = train_df.as_matrix()

# y即Survival结果
y = train_np[:, 0]

# X即特征属性值
X = train_np[:, 1:]

# fit到RandomForestRegressor之中
clf = linear_model.LogisticRegression(C=1.0, penalty='l1', tol=1e-6)
clf.fit(X, y)
    
clf





data_test = pd.read_csv("C:\\Users\\junhua.lan\\Desktop\\Kaggle_Titanic\\test.csv")
data_test.loc[ (data_test.Fare.isnull()), 'Fare' ] = 0
# 接着我们对test_data做和train_data中一致的特征变换
# 首先用同样的RandomForestRegressor模型填上丢失的年龄
tmp_df = data_test[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]
null_age = tmp_df[data_test.Age.isnull()].as_matrix()
# 根据特征属性X预测年龄并补上
X = null_age[:, 1:]
predictedAges = rfr.predict(X)
data_test.loc[ (data_test.Age.isnull()), 'Age' ] = predictedAges

data_test = set_Cabin_type(data_test)
dummies_Cabin = pd.get_dummies(data_test['Cabin'], prefix= 'Cabin')
dummies_Embarked = pd.get_dummies(data_test['Embarked'], prefix= 'Embarked')
dummies_Sex = pd.get_dummies(data_test['Sex'], prefix= 'Sex')
dummies_Pclass = pd.get_dummies(data_test['Pclass'], prefix= 'Pclass')


df_test = pd.concat([data_test, dummies_Cabin, dummies_Embarked, dummies_Sex, dummies_Pclass], axis=1)
df_test.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)



test = df_test.filter(regex='Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')
predictions = clf.predict(test)
result = pd.DataFrame({'PassengerId':data_test['PassengerId'].as_matrix(), 'Survived':predictions.astype(np.int32)})
result.to_csv("logistic_regression_predictions.csv", index=False)



import numpy as np
import matplotlib.pyplot as plt
from sklearn.learning_curve import learning_curve


# 用sklearn的learning_curve得到training_score和cv_score，使用matplotlib画出learning curve
def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None, n_jobs=1, 
                        train_sizes=np.linspace(.05, 1., 20), verbose=0, plot=True):
    """
    画出data在某模型上的learning curve.
    参数解释
    ----------
    estimator : 你用的分类器。
    title : 表格的标题。
    X : 输入的feature，numpy类型
    y : 输入的target vector
    ylim : tuple格式的(ymin, ymax), 设定图像中纵坐标的最低点和最高点
    cv : 做cross-validation的时候，数据分成的份数，其中一份作为cv集，其余n-1份作为training(默认为3份)
    n_jobs : 并行的的任务数(默认1)
    """
    train_sizes, train_scores, test_scores = learning_curve(
        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, verbose=verbose)
    
    train_scores_mean = np.mean(train_scores, axis=1)
    train_scores_std = np.std(train_scores, axis=1)
    test_scores_mean = np.mean(test_scores, axis=1)
    test_scores_std = np.std(test_scores, axis=1)
    
    if plot:
        plt.figure()
        plt.title(title)
        if ylim is not None:
            plt.ylim(*ylim)
        plt.xlabel(u"训练样本数")
        plt.ylabel(u"得分")
        plt.gca().invert_yaxis()
        plt.grid()
    
        plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, 
                         alpha=0.1, color="b")
        plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, 
                         alpha=0.1, color="r")
        plt.plot(train_sizes, train_scores_mean, 'o-', color="b", label=u"训练集上得分")
        plt.plot(train_sizes, test_scores_mean, 'o-', color="r", label=u"交叉验证集上得分")
    
        plt.legend(loc="best")
        
        plt.draw()
        plt.gca().invert_yaxis()
        plt.show()
    
    midpoint = ((train_scores_mean[-1] + train_scores_std[-1]) + (test_scores_mean[-1] - test_scores_std[-1])) / 2
    diff = (train_scores_mean[-1] + train_scores_std[-1]) - (test_scores_mean[-1] - test_scores_std[-1])
    return midpoint, diff

plot_learning_curve(clf, u"学习曲线", X, y)




import numpy as np
evals=np.array([0,2,5,3,1])
evals
sorted_indices = np.argsort(evals)
sorted_indices


L = np.array([2,3,1,4])

N = [1,2,3,4]
L.sort()
L
argsort(a[, axis, kind, order = decreasing])
L.argsort()



import numpy as np
x=np.array([1,4,3,-1,6,9])
y = np.array([1,4,3,-1,6,9])
x
index = x.argsort(order = )
y[index]

test = range(1,10)/20
            
max(x)


1:10

numbers[0:10:1]  
from rpy2.robjects.packages import importr

print(range(1,101))

range(1, 100) * (1/100)
range(1, 9) 


 for i in range(5):
     print(i,end=',')

np.array(range(5)) * 1/5
len(x)
x = np.array(range(1,len(x)+1))
x
x.cumsum()
data['sum_Times']=data['Times'].groupby(['userID']).cumsum() 



x = np.array([3, 1, 2])
x
index = np.argsort(x) #按升序排列
index 
index1 = np.argsort(-x) #按降序排列
index1[x]
x[index1]


# change the last word to 10
a = ['12345', '12345', '1234x', '12346', '1234x']
a
even_num_to_square = {x: x **2 for x in nums if x % 2 == 0}

a1 = {x: idcardmodifyfunc(x) f}
a1

xnew = np.array([])
for x in a:
    if(x[4] == 'x'):
        x.replace('x', '10')
        


     
def idcardmodifyfunc(x):
    if(x[4] == 'x'):
        x = x.replace('x', '10')
    return(x)




testresult = []
for each in a:
    testresult.append(idcardmodifyfunc(each))
testresult


scores = [55, 80, 83, 64, 91, 100, 90, 79]
 
def score_filter( score ):
  return score >=80 and score < 90
 
# 普通方法
filtered_score = []
 
for each in scores:
  if score_filter( each ):
    filtered_score.append( each )
filtered_score




x = np.array([3, 1, 2])
x
index1 = np.argsort(x) #按升序排列
index1
array([1, 2, 0])
index2 = np.argsort(-x) #按降序排列
index2
array([0, 2, 1])
 x[np.argsort(x)] #通过索引值排序后的数组
array([1, 2, 3])
x[np.argsort(-x)]
array([3, 2, 1])

x.sort_index()

x[np.order(x)]
x[np.argsort(-x)]

params 

xgb1 = xgb.train()


def msksfunc(predictors, labels):
    labelordered = label[pd.argsort(-predictors)]
    popuPct = np.array(range(1, len(labels)))
    poscumpct = labelordered.cumsum()/sum(labelordered)
    negcumpct = (1 - labelordered)/sum(1-labelordered)
    datadiff = poscumpct - negcumpct
    return(max(datadiff))

import pandas as pd       
obj=pd.Series([4,9,6,20,4],index=['d','a','e','b','c'])
obj
obj1 = obj.sort_index(ascending=False)
obj1



def msksfunc(predictors, labels):
    obj = pd.Series(labels, index = predictors)
    labelordered = obj.sort_index(ascending=False)
    popupct = np.array(range(1, len(labels)))
    poscumpct = labelordered.cumsum()/sum(labelordered)
    negcumpct = (1 - labelordered)/sum(1-labelordered)
    datadiff = poscumpct - negcumpct
    return(max(datadiff))



bst=xgb.train(param,xg_train,n_round,watchlist,feval= msksfunc,maximize=False)

bst=xgb.train(param,xg_train,n_round,watchlist,feval=maxRecall,obj=custom_loss,maximize=False)

